package entities.tanks;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;

import entities.ID;
import entities.InputGameObject;
import entities.projectiles.Projectile;
import general.Camera;
import general.Game;
import general.Level;
import input.KeyInput;
import input.MouseInput;
import util.Utils;
import util.Velocity;

public class Player extends InputGameObject implements Shooter {
	
	private double _acc = 1.0;
	private double _dcc = 0.5;
	private KeyInput input;
	
	private double gunAngle;
	private int stallTicks,shotCooldown;

	public Player(Level level, double x, double y, double width, double height, ID id) {
		super(level, x, y, width, height, id);
	}

	@Override
	public void tick() {
		move();
		
		simulateMapCollsions(true);
		addVelocity();
		moveNozzle();
		
		shotCooldown--;
		removeDeadProjectiles();
	}
	
	@Override
	public void render(Graphics2D g) {
		g.setColor(Color.white);
		g.fillRect((int)x, (int)y, (int)width, (int)height);
		
		Graphics2D g2d = (Graphics2D) g.create();
		Rectangle rect2 = new Rectangle((int) (x+(width/2)), (int) (y+(height/3)), 60, 20);
	    g2d.rotate(gunAngle, (int) (x+(width/2)), (int) (y+(height/2)));
		g2d.setColor(Color.magenta);
		g2d.draw(rect2);
		g2d.fill(rect2);
		g2d.dispose();
	}
	public void setController(KeyInput input) {
		this.input = input;
	}
	private void move() {
		if (stallTicks-- > 0)
			return;
		if (input.keys[0]) velocity.setX(velocity.getX()+_acc);
		else if (input.keys[1]) velocity.setX(velocity.getX()-_acc);
		else if (!(input.keys[0]) && !input.keys[1]) {
			if (velocity.getX() > 0) velocity.setX(velocity.getX()-_dcc);
			else if (velocity.getX() < 0) velocity.setX(velocity.getX()+_dcc);
		}
		
		if (input.keys[3]) velocity.setY(velocity.getY()+_acc);
		else if (input.keys[2]) velocity.setY(velocity.getY()-_acc);
		else if (!(input.keys[2]) && !input.keys[3]) {
			if (velocity.getY() > 0) velocity.setY(velocity.getY()-_dcc);
			else if (velocity.getY() < 0) velocity.setY(velocity.getY()+_dcc);
		}
		
		velocity.setX(Utils.clamp(velocity.getX(), -5, 5));
		velocity.setY(Utils.clamp(velocity.getY(), -5, 5));
	}
	public void mousePressed(MouseEvent e) {
		if (shotCooldown > 0 || aliveProjectiles() >= 5)
			return;
		shotCooldown = 20;
		Projectile tempBullet = new Projectile(level, x+(width/2)-4, y+(height/2)-4, 8, 8, ID.BULLET, this);
		double angle = Math.atan2(e.getY() - y-(height/2)+Camera.getY(), e.getX() - x-(width/2)+Camera.getX());
		tempBullet.setVelocity(new Velocity(Math.cos(angle), Math.sin(angle)).normalize().multiply(10));
		tempBullet.setBounces(2);
		Game.handler.addObject(tempBullet);
		projectiles.add(tempBullet);
		stallTicks = 20;
		this.setVelocity(new Velocity());
	}
	private void moveNozzle() {
		if (shotCooldown > 0)
			return;
		gunAngle = Math.atan2(MouseInput.getMouseY() - y-(height/2)+Camera.getY(), MouseInput.getMouseX() - x-(width/2)+Camera.getX());
	}
}

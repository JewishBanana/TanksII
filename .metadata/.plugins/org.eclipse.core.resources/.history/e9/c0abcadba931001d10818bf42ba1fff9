package general;

import java.awt.Canvas;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.GraphicsEnvironment;
import java.awt.image.BufferStrategy;
import java.awt.image.BufferedImage;

import input.KeyInput;
import input.MouseInput;

public class Game extends Canvas implements Runnable {
	
	private static final long serialVersionUID = -2842753496379937675L;
	
	public static int WIDTH = 1600, HEIGHT = 900;
	public int fullWidth, fullHeight;
	public static int tileSize = 64;
	public String title = "Tanks II";
	
	private Thread thread;
	private boolean isRunning = false;
	
	public static Handler handler;
	public KeyInput input;
	public MouseInput minput;
	private Level level;
	
	public Game() {
		new Window(WIDTH, HEIGHT, title, this);
		this.requestFocusInWindow();
		init();
		
		level.load("res/levels/default/level1.png");
		
		start();
	}
	private void init() {
		handler = new Handler();
		input = new KeyInput();
		new Camera(0, 0);
		level = new Level(this, handler);
		handler.setLevel(level);
		minput = new MouseInput(this);
		this.addKeyListener(input);
		this.addMouseListener(minput);
		this.addMouseMotionListener(minput);
	}
	private synchronized void start() {
		if (isRunning) return;
		
		thread = new Thread(this);
		thread.start();
		isRunning = true;
	}
	private synchronized void stop() {
		if (!(isRunning)) return;
		
		try {
			thread.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		isRunning = false;
	}
	public void run() {
		long lastTime = System.nanoTime();
		double amountOfTicks = 60.0;
		double ns = 1000000000 / amountOfTicks;
		double delta = 0;
		long timer = System.currentTimeMillis();
		int updates = 0;
		int frames = 0;
		while(isRunning) {
			long now = System.nanoTime();
			delta += (now - lastTime) / ns;
			lastTime = now;
			while(delta >= 1) {
				tick();
				updates++;
				delta--;
			}
			render();
			frames++;
					
			if(System.currentTimeMillis() - timer > 1000) {
				timer += 1000;
				System.out.println("FPS: " + frames + " TICKS: " + updates);
				frames = 0;
				updates = 0;
			}
		}
		stop();
	}
	private void tick() {
		handler.tick();
		Camera.tick();
	}
	private void render() {
		BufferStrategy bs = this.getBufferStrategy();
		if (bs == null) {
			this.createBufferStrategy(3);
			return;
		}
		
		Graphics g = bs.getDrawGraphics();
		
//		BufferedImage screen = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_ARGB);
		BufferedImage screen = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getDefaultConfiguration().createCompatibleImage(WIDTH, HEIGHT);
		Graphics2D g2d = screen.createGraphics();
		
		g2d.translate(-Camera.getX(), -Camera.getY());
		
		level.render(g2d);
		handler.render(g2d);
		
		g2d.translate(Camera.getX(), Camera.getY());
		
		g.drawImage(screen, 0, 0, fullWidth, fullHeight, null);
		
		bs.show();
		System.gc();
//		g2d.dispose();
//		g.dispose();
	}
	public static void main(String args[]) {
		new Game();
	}
}
